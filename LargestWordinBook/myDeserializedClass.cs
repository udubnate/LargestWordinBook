using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;

namespace LargestWordinBook
{
    // <auto-generated />
    //  I used this website: https://jsonformatter.org/json-to-csharp
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using CodeBeautify;
    //
    //    var welcome9 = DictionaryObject.FromJson(jsonString);


    using System;
        using System.Collections.Generic;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class DictionaryObject
        {
            [JsonProperty("word")]
            public string Word { get; set; }

            [JsonProperty("phonetic")]
            public string Phonetic { get; set; }

            [JsonProperty("phonetics")]
            public Phonetic[] Phonetics { get; set; }

            [JsonProperty("origin")]
            public string Origin { get; set; }

            [JsonProperty("meanings")]
            public Meaning[] Meanings { get; set; }
        }

        public partial class Meaning
        {
            [JsonProperty("partOfSpeech")]
            public string PartOfSpeech { get; set; }

            [JsonProperty("definitions")]
            public Definition[] Definitions { get; set; }
        }

        public partial class Definition
        {
            [JsonProperty("definition")]
            public string DefinitionDefinition { get; set; }

            [JsonProperty("example")]
            public string Example { get; set; }

            [JsonProperty("synonyms")]
            public string[] Synonyms { get; set; }

            [JsonProperty("antonyms")]
            public object[] Antonyms { get; set; }
        }

        public partial class Phonetic
        {
            [JsonProperty("text")]
            public string Text { get; set; }

            [JsonProperty("audio")]
            public string Audio { get; set; }
        }

        public partial class DictionaryObject
    {
            public static DictionaryObject[] FromJson(string json) => JsonConvert.DeserializeObject<DictionaryObject[]>(json, Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this DictionaryObject[] self) => JsonConvert.SerializeObject(self, Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }





